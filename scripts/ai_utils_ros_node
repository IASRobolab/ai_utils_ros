#! /usr/bin/env python

from ai_utils_ros.detector_factory import DetectorFactory
from ai_utils_msgs.msg import Object, ObjectArray

import numpy as np
from cv_bridge import CvBridge
import rospy
from sensor_msgs.msg import Image


class RosDetector:
    def __init__(self, detector) -> None:
        self.bridge = CvBridge()
        self.detector = detector

        self.camera_sub = rospy.Subscriber(camera_input_topic, Image, self.callback)
        self.camera_pub = rospy.Publisher(camera_output_topic, Image, queue_size=100)

    def callback(self, data):
        img_raw = self.bridge.imgmsg_to_cv2(data, desired_encoding='bgr8')
        img_raw = np.array(img_raw)
        inference, image = self.detector.img_inference(img_raw)

        # Compute centroid and size (TODO)

        self.camera_pub.publish(self.bridge.cv2_to_imgmsg(image))


if __name__ == '__main__':

    rospy.init_node('ai_utils_ros_node', anonymous=True)

    camera_input_topic = rospy.get_param("~camera_input_topic", "")
    camera_output_topic = rospy.get_param("~camera_output_topic", "")

    if camera_input_topic == "" or camera_output_topic == "":
        rospy.logerr("camera_input_topic or camera_output_topic cannot be an empty string.")
        exit(1)

    detector = DetectorFactory().get_detector

    ros_detector = RosDetector(detector)

    rospy.loginfo("Subscriber initialized.")
    rospy.spin()
