#! /usr/bin/env python

from ai_utils_ros.detector_factory import DetectorFactory, pkg_name
from ai_utils_msgs.msg import Object, ObjectArray
from ai_utils_msgs.srv import ComputeInference, ComputeInferenceResponse

import numpy as np
from cv_bridge import CvBridge
import rospy
from sensor_msgs.msg import Image


class RosDetector:
    def __init__(self, detector, image_sub_topic, image_pub_topic, objects_pub_topic, start_inference) -> None:
        self.bridge = CvBridge()

        self.detector = detector
        self.image_sub_topic = image_sub_topic
        self.image_pub_topic = image_pub_topic
        self.objects_pub_topic = objects_pub_topic
        self.start_inference = start_inference

        self.compute_inf_srv = rospy.Service(pkg_name+"/compute_inference", ComputeInference, self.compute_inference)

        if self.start_inference:
            self.image_sub = rospy.Subscriber(self.image_sub_topic, Image, self.callback)
        else:
            self.image_sub = None
        self.image_pub = rospy.Publisher(self.image_pub_topic, Image, queue_size=100)
        self.objects_pub = None

        if objects_pub_topic != "":
            self.objects_pub = rospy.Publisher(objects_pub_topic, ObjectArray, queue_size=100)

        self.objects = ObjectArray()

    def compute_inference(self, req):
        self.start_inference = req.start
        if self.start_inference:
            rospy.loginfo("Start computing the inference")
            self.image_sub = rospy.Subscriber(self.image_sub_topic, Image, self.callback)
        else:
            rospy.loginfo("Stop computing the inference")
            self.image_sub.unregister()
            self.image_sub = None
        return ComputeInferenceResponse()

    def callback(self, data):
        img_raw = self.bridge.imgmsg_to_cv2(data, desired_encoding='bgr8')
        img_raw = np.array(img_raw)
        inference, image = self.detector.img_inference(img_raw)

        # Publish the image
        self.image_pub.publish(self.bridge.cv2_to_imgmsg(image))

        self.objects.array.clear()

        # Publish the objects
        if self.objects_pub is not None:
            self.objects.header = data.header
            for class_key in inference.keys():
                for idx in range(len((inference[class_key]['id']))):
                    object = Object()
                    object.type = class_key
                    object.score = inference[class_key]['scores'][idx]
                    object.id = inference[class_key]['id'][idx]
                    # object.centroid = compute_centroid_from_mask(inference[class_key]['masks'][idx].astype(
                    # "uint8")) # TODO talk with UAVs
                    object.centroid = [(inference[class_key]['boxes'][idx][2]+inference[class_key]['boxes'][idx][0])/2,
                                       (inference[class_key]['boxes'][idx][3]+inference[class_key]['boxes'][idx][1])/2]
                    object.size = [inference[class_key]['boxes'][idx][2]-inference[class_key]['boxes'][idx][0],
                                   inference[class_key]['boxes'][idx][3]-inference[class_key]['boxes'][idx][1]]
                    self.objects.array.append(object)
            self.objects_pub.publish(self.objects)


if __name__ == '__main__':

    rospy.init_node(pkg_name+'_node', anonymous=True)

    image_input_topic = rospy.get_param("~image_input_topic", "")
    image_output_topic = rospy.get_param("~image_output_topic", "")
    objects_output_topic = rospy.get_param("~objects_output_topic", "")
    autostart = rospy.get_param("~autostart", False)

    if image_input_topic == "" or image_output_topic == "":
        rospy.logerr("image_input_topic or image_output_topic cannot be an empty string.")
        exit(1)

    ros_detector = RosDetector(DetectorFactory().get_detector, image_input_topic, image_output_topic,
                               objects_output_topic, autostart)

    rospy.loginfo("ai_utils_ros_node initialized.")
    rospy.spin()
